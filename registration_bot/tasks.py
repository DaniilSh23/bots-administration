import time
from celery import shared_task
import requests
from registration_bot.MyBitrix23 import Bitrix23
from registration_bot.models import BotSettings
from loguru import logger


@shared_task
def get_pdf_doc_from_btrx(invoice_doc_id, contract_doc_id, tlg_id):
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∂–¥—ë—Ç 30 —Å–µ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å–∞.
    –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.
    """
    logger.info('–ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏\n–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')
    logger.info(f'–ü–ê–†–ê–ú–ï–¢–†–´ –í –û–¢–õ–û–ñ–ï–ù–ù–û–ô –ó–ê–î–ê–ß–ï:\n\t{invoice_doc_id}\t{contract_doc_id}\t{tlg_id}')

    time.sleep(30)  # –ñ–¥—ë–º –ø–æ–∫–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ
    # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –∏ —Ä–µ—Ñ—Ä–µ—à–∏–º —Ç–æ–∫–µ–Ω—ã
    bitra = Bitrix23(
        hostname=BotSettings.objects.get(key="subdomain").value,
        client_id=BotSettings.objects.get(key="client_id").value,
        client_secret=BotSettings.objects.get(key="client_secret").value,
        access_token=BotSettings.objects.get(key="access_token").value,
        refresh_token=BotSettings.objects.get(key="refresh_token").value,
    )
    bitra.refresh_tokens()
    bot_token = BotSettings.objects.get(key='bot_token').value

    # –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ
    method = 'crm.documentgenerator.document.get'
    params = {'id': invoice_doc_id}
    invoice_rslt = bitra.call(method=method, params=params)
    invoice_pdf_link = invoice_rslt['result']['document'].get('pdfUrlMachine')
    if not invoice_pdf_link:
        logger.warning('–°—Å—ã–ª–∫–∞ –Ω–∞ –ü–î–§ –¥–æ–∫-—Ç —Å—á—ë—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –µ—â—ë 5 —Ä–∞–∑ —Å –ø–∞—É–∑–æ–π –≤ 5 —Å–µ–∫')
        for _ in range(10):
            time.sleep(5)
            params = {'id': invoice_doc_id}
            invoice_rslt = bitra.call(method=method, params=params)
            invoice_pdf_link = invoice_rslt['result']['document'].get('pdfUrlMachine')
            if invoice_pdf_link:    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF –ø–æ–ª—É—á–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ
    params = {'id': contract_doc_id}
    contract_rslt = bitra.call(method=method, params=params)
    contract_pdf_link = contract_rslt['result']['document'].get('pdfUrlMachine')
    if not contract_pdf_link:
        logger.warning('–°—Å—ã–ª–∫–∞ –Ω–∞ –ü–î–§ –¥–æ–∫-—Ç —Å—á—ë—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –µ—â—ë 10 —Ä–∞–∑ —Å –ø–∞—É–∑–æ–π –≤ 5 —Å–µ–∫')
        for _ in range(10):
            time.sleep(5)
            params = {'id': contract_doc_id}
            contract_rslt = bitra.call(method=method, params=params)
            contract_pdf_link = contract_rslt['result']['document'].get('pdfUrlMachine')
            if contract_pdf_link:  # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF –ø–æ–ª—É—á–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break

    if invoice_pdf_link and contract_pdf_link:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á—ë—Ç–∞
        bot_send_invoice_rslt = requests.post(
            url=f'https://api.telegram.org/bot{bot_token}/sendDocument',
            data={
                'chat_id': tlg_id,
                'document': invoice_pdf_link,
                'caption': 'üìÑ –í–∞—à —Å—á—ë—Ç.'
            }
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
        bot_send_contract_rslt = requests.post(
            url=f'https://api.telegram.org/bot{bot_token}/sendDocument',
            data={
                'chat_id': tlg_id,
                'document': contract_pdf_link,
                'caption': 'üìÑ –í–∞—à –¥–æ–≥–æ–≤–æ—Ä.'
            }
        )

        if bot_send_invoice_rslt.status_code != 400 and bot_send_contract_rslt.status_code != 400:
            logger.success('–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ü–î–§ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É. –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
        else:
            logger.critical('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ "—Å—ã—Ä–æ–π" –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å!–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    else:   # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ü–î–§ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
        logger.critical(f'–°—Å—ã–ª–∫–∏ –Ω–∞ –ü–î–§ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –í–û—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n\n{invoice_rslt}\n\n{contract_rslt}')


@shared_task
def remind_user(tlg_id, reminder_type):
    """
    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—É—Å—Ç—è —Å—É—Ç–∫–∏.
    """
    logger.info(f'–ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏!\n–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å TG ID == {tlg_id}.')
    while True:
        time.sleep(86400)    # 86400
        if reminder_type == 'p':    # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
            msg_text = '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –í–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã —Å—á—ë—Ç–∞.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –û–ü–õ–ê–¢–ò–õ".'
        elif reminder_type == 's':  # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∏
            msg_text = '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –í–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –ú–ß–î –í–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å—å—é.\n' \
                       '–î–æ–∫—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –í–∞—à—É —ç–ª.–ø–æ—á—Ç—É.\n\n' \
                       '–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –ü–û–î–ü–ò–°–ê–õ".'
        else:
            msg_text = ''
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        bot_token = BotSettings.objects.get(key='bot_token').value
        send_remind_rslt = requests.post(
            url=f'https://api.telegram.org/bot{bot_token}/sendMessage',
            data={
                'chat_id': tlg_id,
                'text': msg_text,
            }
        )
        if send_remind_rslt.status_code != 400:
            logger.success(f'–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å TG ID == {tlg_id}')
        else:
            logger.warning(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å TG ID == {tlg_id} –ù–ï –£–î–ê–õ–ê–°–¨!')
